name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  RUST_BACKTRACE: 1

jobs:
  test-rust:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt -- --check
        if: matrix.os == 'ubuntu-latest'
        
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        if: matrix.os == 'ubuntu-latest'
        
      - name: Build
        run: cargo build --verbose
        
      - name: Run tests
        run: cargo test --verbose
        
      - name: Validate schema
        run: |
          cargo run --bin keypath_cli -- validate samples/simple.json
          cargo run --bin keypath_cli -- validate samples/dual.json
        if: matrix.os != 'windows-latest'  # Skip on Windows until we handle paths

  test-swift:
    name: Swift Tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_15.0.app
        
      - name: Build Swift Package
        run: swift build
        working-directory: ./KeypathRecorder
        continue-on-error: true  # Will fail until we create the Swift project
        
      - name: Run Swift Tests
        run: swift test
        working-directory: ./KeypathRecorder
        continue-on-error: true  # Will fail until we create the Swift project

  schema-validation:
    name: Validate JSON Schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install ajv-cli
        run: npm install -g ajv-cli
        
      - name: Validate sample files against schema
        run: |
          ajv validate -s ir_schema.json -d simple.json
          ajv validate -s ir_schema.json -d samples/simple.json || true
          ajv validate -s ir_schema.json -d samples/dual.json || true

  integration:
    name: Integration Tests
    runs-on: macos-latest
    needs: [test-rust, test-swift]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build all components
        run: |
          cargo build --release
          
      - name: Run integration tests
        run: |
          # Test CLI commands work
          ./target/release/keypath_cli --help
          ./target/release/keypath_cli validate simple.json || true
          
  # Gate that must pass before any push to main
  ci-gate:
    name: CI Gate
    needs: [test-rust, test-swift, schema-validation, integration]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all tests passed
        run: |
          if [[ "${{ needs.test-rust.result }}" != "success" ]]; then
            echo "Rust tests failed"
            exit 1
          fi
          if [[ "${{ needs.schema-validation.result }}" != "success" ]]; then
            echo "Schema validation failed"
            exit 1
          fi
          echo "All required checks passed!"